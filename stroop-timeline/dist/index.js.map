{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsPsych } from \"jspsych\";\nimport jsPsychHtmlKeyboardResponse from '@jspsych/plugin-html-keyboard-response';\nimport jsPsychHtmlButtonResponse from '@jspsych/plugin-html-button-response';\nimport jsPsychInstructions from '@jspsych/plugin-instructions';\n\n/* Constants */\nconst DEFAULT_PRACTICE_TRIALS_PER_CONDITION = 1;\nconst DEFAULT_MAIN_TRIALS_PER_CONDITION = 6;\nconst DEFAULT_TRIAL_TIMEOUT = 3000;\nconst DEFAULT_FIXATION_DURATION = { min: 300, max: 1000 };\nconst DEFAULT_SHOW_PRACTICE_FEEDBACK = true;\nconst DEFAULT_INCLUDE_FIXATION = true;\n\nconst COLORS = [\n    { name: 'RED', hex: 'red', index: 0 },\n    { name: 'GREEN', hex: 'green', index: 1 },\n    { name: 'BLUE', hex: 'blue', index: 2 },\n    { name: 'YELLOW', hex: 'yellow', index: 3 }\n];\n\nconst WORDS = ['RED', 'GREEN', 'BLUE', 'YELLOW'];\n\n/* Types */\ninterface StroopStimulus {\n    word: string;\n    color: string;\n    correct_response: number;\n    congruent: boolean;\n}\n\ninterface TrialData {\n    task: string;\n    word?: string;\n    color?: string;\n    correct_response?: number;\n    congruent?: boolean;\n    correct?: boolean;\n    rt?: number;\n}\n\ninterface StroopState {\n    practiceCompleted: boolean;\n    mainTrialsCompleted: number;\n    totalTrials: number;\n}\n\n/* Internal state */\nlet state: StroopState = {\n    practiceCompleted: false,\n    mainTrialsCompleted: 0,\n    totalTrials: 0\n};\n\n/* Internal functions */\nfunction resetState() {\n    state = {\n        practiceCompleted: false,\n        mainTrialsCompleted: 0,\n        totalTrials: 0\n    };\n}\n\nfunction generateStimuli(): StroopStimulus[] {\n    const stimuli: StroopStimulus[] = [];\n\n    for (const word of WORDS) {\n        for (const color of COLORS) {\n            stimuli.push({\n                word: word,\n                color: color.hex,\n                correct_response: color.index,\n                congruent: word === color.name\n            });\n        }\n    }\n\n    return stimuli;\n}\n\nfunction shuffleArray<T>(array: T[]): T[] {\n    const newArray = [...array];\n    for (let i = newArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray;\n}\n\n/* Timeline component generating functions */\nfunction createWelcome() {\n    const welcome = {\n        type: jsPsychHtmlButtonResponse,\n        stimulus: `\n            <div style=\"max-width: 700px; margin: 0 auto; text-align: center; padding: 20px;\">\n                <h1>Welcome to the Stroop Task!</h1>\n                <p>In this experiment, you will see words printed in different colors.</p>\n                <p>Your task is to identify the <strong>color of the ink</strong> the word is printed in, NOT the word itself.</p>\n                <p>Please respond as quickly and accurately as possible.</p>\n            </div>\n        `,\n        choices: ['Continue'],\n        post_trial_gap: 500\n    };\n\n    return welcome;\n}\n\nfunction createInstructions() {\n    const instructions = {\n        type: jsPsychInstructions,\n        pages: [\n            `<div style=\"max-width: 700px; margin: 0 auto; text-align: left; padding: 20px;\">\n                <h2>Instructions</h2>\n                <p>You will see a word (e.g., \"RED\", \"BLUE\") displayed in one of four ink colors: red, green, blue, or yellow.</p>\n                <p>Your task is to click the button corresponding to the <strong>INK COLOR</strong> of the word, ignoring what the word says.</p>\n                <p>Click the colored buttons that will appear below each word:</p>\n                \n                <div style=\"display: flex; justify-content: space-around; margin: 20px 0; flex-wrap: wrap;\">\n                    ${COLORS.map(color => `\n                        <div style=\"padding: 15px; border: 1px solid #ccc; border-radius: 8px; margin: 10px; min-width: 120px; text-align: center;\">\n                            <span style=\"color: ${color.hex}; font-size: 24px; font-weight: bold; display: block; margin-bottom: 5px;\">${color.name}</span>\n                        </div>\n                    `).join('')}\n                </div>\n            </div>`,\n            `<div style=\"max-width: 700px; margin: 0 auto; text-align: left; padding: 20px;\">\n                <h2>Examples</h2>\n                <p>If you see the word <strong style=\"color:blue;\">RED</strong> (written in BLUE ink), you should click the BLUE button.</p>\n                <p>If you see the word <strong style=\"color:green;\">GREEN</strong> (written in GREEN ink), you should click the GREEN button.</p>\n                <p>There will be a short practice session first.</p>\n            </div>`\n        ],\n        show_clickable_nav: true,\n        button_label_previous: 'Previous',\n        button_label_next: 'Next',\n        button_label_finish: 'Begin Practice'\n    };\n\n    return instructions;\n}\n\nfunction createFixation(duration?: { min: number, max: number }) {\n    const fixationDuration = duration || DEFAULT_FIXATION_DURATION;\n\n    const fixation = {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: '<div style=\"font-size:60px;\">+</div>',\n        choices: \"NO_KEYS\",\n        trial_duration: () => {\n            return Math.floor(Math.random() *\n                (fixationDuration.max - fixationDuration.min + 1)) +\n                fixationDuration.min;\n        },\n        data: {\n            task: 'fixation'\n        }\n    };\n\n    return fixation;\n}\n\nfunction createStroopTrial(\n    jsPsych: JsPsych,\n    stimulus: StroopStimulus,\n    isPractice: boolean,\n    trialTimeout?: number\n) {\n    const trial = {\n        type: jsPsychHtmlButtonResponse,\n        stimulus: `<div style=\"font-size: 48px; color: ${stimulus.color}; font-weight: bold;\">${stimulus.word}</div>`,\n        choices: COLORS.map(c => c.name),\n        button_html: (choice: string, choice_index: number) => {\n            const color = COLORS.find(c => c.name === choice);\n            return `<div style=\"border: 3px solid #333; width: 150px; height: 60px; margin: 20px; background-color: ${color?.hex}; border-radius: 8px; cursor: pointer; display: flex; align-items: center; justify-content: center; font-weight: bold;\">${choice}</div>`;\n        },\n        margin_horizontal: '20px',\n        margin_vertical: '20px',\n        trial_duration: trialTimeout || DEFAULT_TRIAL_TIMEOUT,\n        data: {\n            task: isPractice ? 'practice' : 'response',\n            word: stimulus.word,\n            color: stimulus.color,\n            correct_response: stimulus.correct_response,\n            congruent: stimulus.congruent\n        },\n        on_finish: (data: any) => {\n            data.correct = (data.response === data.correct_response);\n            if (!isPractice) {\n                state.mainTrialsCompleted++;\n            }\n        }\n    };\n\n    return trial;\n}\n\nfunction createPracticeFeedback(jsPsych: JsPsych) {\n    const feedback = {\n        type: jsPsychHtmlButtonResponse,\n        stimulus: () => {\n            const lastTrial = jsPsych.data.get().last(1).values()[0];\n            const correctColorName = COLORS[lastTrial.correct_response].name;\n\n            if (lastTrial.correct) {\n                return '<div style=\"font-size: 24px; color: green; text-align: center;\"><p>✓ CORRECT!</p></div>';\n            } else {\n                return `<div style=\"font-size: 24px; color: red; text-align: center;\"><p>✗ INCORRECT. The correct answer was ${correctColorName} for ${lastTrial.color.toUpperCase()} ink.</p></div>`;\n            }\n        },\n        choices: ['Continue'],\n        trial_duration: 2000\n    };\n\n    return feedback;\n}\n\nfunction createPracticeDebrief() {\n    const debrief = {\n        type: jsPsychHtmlButtonResponse,\n        stimulus: `\n            <div style=\"max-width: 700px; margin: 0 auto; text-align: center; padding: 20px;\">\n                <h2>Practice Complete!</h2>\n                <p>Great job! You've finished the practice trials.</p>\n                <p>Now you'll begin the main experiment.</p>\n                <p>Remember:</p>\n                <ul style=\"text-align: left; display: inline-block;\">\n                    <li>Respond to the <strong>ink color</strong>, not the word</li>\n                    <li>Be as fast and accurate as possible</li>\n                    <li>Click the colored buttons for Red, Green, Blue, Yellow</li>\n                </ul>\n            </div>\n        `,\n        choices: ['Start Experiment'],\n        post_trial_gap: 500,\n        on_finish: () => {\n            state.practiceCompleted = true;\n        }\n    };\n\n    return debrief;\n}\n\nfunction createResults(jsPsych: JsPsych) {\n    const results = {\n        type: jsPsychHtmlButtonResponse,\n        stimulus: () => {\n            const trials = jsPsych.data.get().filter({ task: 'response' });\n            const correctTrials = trials.filter({ correct: true });\n\n            if (trials.count() === 0) {\n                return `<p>No trial data found.</p>`;\n            }\n\n            const congruentTrials = trials.filter({ congruent: true });\n            const incongruentTrials = trials.filter({ congruent: false });\n\n            const congruentCorrect = congruentTrials.filter({ correct: true });\n            const incongruentCorrect = incongruentTrials.filter({ correct: true });\n\n            const congruentAccuracy = congruentTrials.count() > 0\n                ? Math.round(congruentCorrect.count() / congruentTrials.count() * 100)\n                : 0;\n            const incongruentAccuracy = incongruentTrials.count() > 0\n                ? Math.round(incongruentCorrect.count() / incongruentTrials.count() * 100)\n                : 0;\n\n            const congruentRt = congruentCorrect.count() > 0\n                ? Math.round(congruentCorrect.select('rt').mean())\n                : 0;\n            const incongruentRt = incongruentCorrect.count() > 0\n                ? Math.round(incongruentCorrect.select('rt').mean())\n                : 0;\n\n            const stroopEffect = incongruentRt - congruentRt;\n\n            return `\n                <div style=\"text-align: center; max-width: 600px; margin: 0 auto;\">\n                    <h2>Experiment Complete!</h2>\n                    <div style=\"text-align: left; background-color: #f9f9f9; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                        <p><strong>Congruent trials:</strong> ${congruentAccuracy}% correct, ${congruentRt}ms average</p>\n                        <p><strong>Incongruent trials:</strong> ${incongruentAccuracy}% correct, ${incongruentRt}ms average</p>\n                        <p><strong>Stroop Effect:</strong> ${stroopEffect}ms</p>\n                    </div>\n                    <p>Thank you for participating!</p>\n                </div>\n            `;\n        },\n        choices: ['Download Data'],\n        on_finish: () => {\n            jsPsych.data.displayData();\n        }\n    };\n\n    return results;\n}\n\n/* Main timeline creation function */\nexport function createTimeline(\n    jsPsych: JsPsych,\n    {\n        practiceTrialsPerCondition = DEFAULT_PRACTICE_TRIALS_PER_CONDITION,\n        mainTrialsPerCondition = DEFAULT_MAIN_TRIALS_PER_CONDITION,\n        trialTimeout = DEFAULT_TRIAL_TIMEOUT,\n        fixationDuration = DEFAULT_FIXATION_DURATION,\n        showPracticeFeedback = DEFAULT_SHOW_PRACTICE_FEEDBACK,\n        includeFixation = DEFAULT_INCLUDE_FIXATION,\n        showInstructions = true,\n        showResults = true\n    }: {\n        practiceTrialsPerCondition?: number,\n        mainTrialsPerCondition?: number,\n        trialTimeout?: number,\n        fixationDuration?: { min: number, max: number },\n        showPracticeFeedback?: boolean,\n        includeFixation?: boolean,\n        showInstructions?: boolean,\n        showResults?: boolean\n    } = {}\n) {\n    // Reset state for new timeline\n    resetState();\n\n    const timeline: any[] = [];\n    const stimuli = generateStimuli();\n\n    // Separate congruent and incongruent stimuli\n    const congruentStimuli = stimuli.filter(s => s.congruent);\n    const incongruentStimuli = stimuli.filter(s => !s.congruent);\n\n    // Add welcome\n    timeline.push(createWelcome());\n\n    // Add instructions if requested\n    if (showInstructions) {\n        timeline.push(createInstructions());\n    }\n\n    // Create practice trials\n    const practiceStimuli = [\n        ...congruentStimuli.slice(0, practiceTrialsPerCondition),\n        ...incongruentStimuli.slice(0, practiceTrialsPerCondition * 3) // More incongruent for practice\n    ];\n\n    const shuffledPracticeStimuli = shuffleArray(practiceStimuli);\n\n    // Add practice trials\n    for (const stimulus of shuffledPracticeStimuli) {\n        if (includeFixation) {\n            timeline.push(createFixation(fixationDuration));\n        }\n        timeline.push(createStroopTrial(jsPsych, stimulus, true, trialTimeout));\n        if (showPracticeFeedback) {\n            timeline.push(createPracticeFeedback(jsPsych));\n        }\n    }\n\n    // Add practice debrief\n    timeline.push(createPracticeDebrief());\n\n    // Create main experiment stimuli\n    const mainStimuli = [\n        ...Array(mainTrialsPerCondition).fill(null).flatMap(() => congruentStimuli),\n        ...Array(Math.floor(mainTrialsPerCondition / 2)).fill(null).flatMap(() => incongruentStimuli)\n    ];\n\n    const shuffledMainStimuli = shuffleArray(mainStimuli);\n    state.totalTrials = shuffledMainStimuli.length;\n\n    // Add main trials\n    for (const stimulus of shuffledMainStimuli) {\n        if (includeFixation) {\n            timeline.push(createFixation(fixationDuration));\n        }\n        timeline.push(createStroopTrial(jsPsych, stimulus, false, trialTimeout));\n    }\n\n    // Add results if requested\n    if (showResults) {\n        timeline.push(createResults(jsPsych));\n    }\n\n    return timeline;\n}\n\n/* Export individual components for custom timeline building */\nexport const timelineComponents = {\n    createWelcome,\n    createInstructions,\n    createFixation,\n    createStroopTrial,\n    createPracticeFeedback,\n    createPracticeDebrief,\n    createResults\n};\n\n/* Export utility functions */\nexport const utils = {\n    resetState,\n    generateStimuli,\n    shuffleArray\n};\n\n/* Export types */\nexport type { StroopStimulus, TrialData, StroopState };"]}